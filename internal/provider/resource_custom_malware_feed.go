package provider

import (
	"fmt"

	"github.com/PaloAltoNetworks/terraform-provider-prismacloudcompute/internal/api"
	"github.com/PaloAltoNetworks/terraform-provider-prismacloudcompute/internal/api/feed"
	"github.com/PaloAltoNetworks/terraform-provider-prismacloudcompute/internal/convert"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func resourceCustomMalwareFeed() *schema.Resource {
	return &schema.Resource{
		Create: createCustomMalwareFeed,
		Read:   readCustomMalwareFeed,
		Update: updateCustomMalwareFeed,
		Delete: deleteCustomMalwareFeed,

		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Schema: map[string]*schema.Schema{
			"id": {
				Description: "The ID of the custom malware feed.",
				Type:        schema.TypeString,
				Computed:    true,
			},
			"feed": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: "Feed items list.",
				MinItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"md5": {
							Type:        schema.TypeString,
							Optional:    false,
							Required:    true,
							Description: "MD5 hash for the malware.",
						},
						"name": {
							Type:        schema.TypeString,
							Optional:    false,
							Required:    true,
							Description: "Name for the item.",
						},
						"modified": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "Modified toggle.",
							Default:     0,
						},
						"allowed": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Allowed toggle.",
							Default:     true,
						},
					},
				},
			},
		},
	}
}

func createCustomMalwareFeed(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*api.Client)
	parsedCustomMalwareFeed, err := convert.SchemaToCustomMalwareFeed(d)

	if err != nil {
		return fmt.Errorf("error creating custom malware feed '%+v': %s", parsedCustomMalwareFeed, err)
	}
	parsedFeed := feed.CustomMalware{
		Feed: parsedCustomMalwareFeed,
	}

	if err := feed.UpdateCustomMalware(*client, parsedFeed); err != nil {
		return fmt.Errorf("error creating %s custom malware feed: %s", feedTypeCustomMalware, err)
	}

	d.SetId(feedTypeCustomMalware)
	return readCustomMalwareFeed(d, meta)
}

func readCustomMalwareFeed(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*api.Client)
	retrievedCustomMalware, err := feed.GetCustomMalware(*client)
	if err != nil {
		return fmt.Errorf("error reading %s custom malware feed: %s", feedTypeCustomMalware, err)
	}

	if err := d.Set("feed", convert.CustomMalwareFeedToSchema(retrievedCustomMalware.Feed)); err != nil {
		return fmt.Errorf("error reading %s custom malware feed: %s", feedTypeCustomMalware, err)
	}

	return nil
}

func updateCustomMalwareFeed(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*api.Client)
	parsedCustomMalwareFeed, err := convert.SchemaToCustomMalwareFeed(d)
	if err != nil {
		return fmt.Errorf("error updating custom malware feed '%+v': %s", parsedCustomMalwareFeed, err)
	}

	parsedFeed := feed.CustomMalware{
		Feed: parsedCustomMalwareFeed,
	}
	if err := feed.UpdateCustomMalware(*client, parsedFeed); err != nil {
		return fmt.Errorf("error updating custom malware feed '%+v': %s", parsedCustomMalwareFeed, err)
	}

	return readCustomMalwareFeed(d, meta)
}

func deleteCustomMalwareFeed(d *schema.ResourceData, meta interface{}) error {
	// TODO: reset to default policy
	return nil
}
