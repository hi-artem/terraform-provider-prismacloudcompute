package provider

import (
	"reflect"
	"testing"

	"github.com/PaloAltoNetworks/terraform-provider-prismacloudcompute/internal/api/feed"
	"github.com/PaloAltoNetworks/terraform-provider-prismacloudcompute/internal/convert"
)

type customMalwareFeedItem struct {
	md5      string
	name     string
	modified int
	allowed  bool
}

func TestFlattenCustomMalwareFeed(t *testing.T) {
	cases := []struct {
		feed     []feed.CustomMalwareFeedItem
		expected []customMalwareFeedItem
	}{
		{
			feed: []feed.CustomMalwareFeedItem{
				feed.CustomMalwareFeedItem{
					Name:     "allowed",
					MD5:      "22ee71e9dcc9ca12fc313c6e1ce3f806",
					Modified: 0,
					Allowed:  true,
				},
				feed.CustomMalwareFeedItem{
					Name:     "denied",
					MD5:      "865726b2885feef8e8b25b56a2d7c8f8",
					Modified: 0,
					Allowed:  false,
				},
			},
			expected: []customMalwareFeedItem{
				customMalwareFeedItem{
					name:     "allowed",
					md5:      "22ee71e9dcc9ca12fc313c6e1ce3f806",
					modified: 0,
					allowed:  true,
				},
				customMalwareFeedItem{
					name:     "denied",
					md5:      "865726b2885feef8e8b25b56a2d7c8f8",
					modified: 0,
					allowed:  false,
				},
			},
		},
	}

	for _, c := range cases {
		out := convert.CustomMalwareFeedToSchema(c.feed)
		allowed := out[0].(map[string]interface{})
		if !reflect.DeepEqual(allowed["name"], c.expected[0].name) {
			t.Fatalf("Error matching output and expected for allowed name: %#v vs %#v", out, c.expected)
		}
		if !reflect.DeepEqual(allowed["md5"], c.expected[0].md5) {
			t.Fatalf("Error matching output and expected for allowed md5: %#v vs %#v", out, c.expected)
		}
		if !reflect.DeepEqual(allowed["allowed"], c.expected[0].allowed) {
			t.Fatalf("Error matching output and expected for allowed allowed: %#v vs %#v", out, c.expected)
		}
		denied := out[1].(map[string]interface{})
		if !reflect.DeepEqual(denied["name"], c.expected[1].name) {
			t.Fatalf("Error matching output and expected for denied name: %#v vs %#v", out, c.expected)
		}
		if !reflect.DeepEqual(denied["md5"], c.expected[1].md5) {
			t.Fatalf("Error matching output and expected for denied md5: %#v vs %#v", out, c.expected)
		}
		if !reflect.DeepEqual(denied["allowed"], c.expected[1].allowed) {
			t.Fatalf("Error matching output and expected for denied allowed: %#v vs %#v", out, c.expected)
		}
	}
}
